def jobinfo =   "Databases list: \n"+
{% for hostname_list in hostname_lists.results %}
"{{ hostname_list.stdout }}\n" + {% endfor %}"\n";

currentBuild.rawBuild.project.description = jobinfo;
def hostsMap = [
{% for hostname_list in hostname_lists.results %}
{% set list = hostname_list.stdout.split('-')[1] %}
    {{ list }}: ['{{ dbs[loop.index0].ips[0]}}', '{{ dbs[loop.index0].ips[1]}}', '{{ dbs[loop.index0].ips[2]}}'],
{% endfor %}
]
def createMasterStages(hostsMap) {
    def stages = [:]
    hostsMap.each { claster, hosts ->
        if (params[claster] && params.force && params.main_pg == 'master') {
            stages["${claster}"] = {
                stage("${claster}  add vip to master") {
                    script {
                        try {
                            sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[1] + ' sudo  ip addr del ' + hosts[2] + ' dev ens192 ')
                            }
                        catch (Exception e) {                            }
                        def pg_lsclusters_vesr = sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[0] + ' sudo pg_lsclusters | grep 5432| awk \'{print \$1}\'' ).trim()
                        if (params.promote == true) {
                            sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[0] + ' sudo pg_ctlcluster ' + pg_lsclusters_vesr + pg_ctlcluster_arg)
                        }
                        sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[0] + ' sudo  ip addr add ' + hosts[2] + ' dev ens192 ')
                    }
                }
            }
        }
    }
    return stages
}
def createSlaveStages(hostsMap) {
    def stages = [:]
    hostsMap.each { claster, hosts ->
        if (params[claster] && params.force && params.main_pg == 'repl') {
            stages["${claster}"] = {
                stage("${claster}  add vip to repl") {
                    script {
                        try {
                            sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[0] + ' sudo  ip addr del ' + hosts[2] + ' dev ens192 ')
                            }
                        catch (Exception e) {                            }
                        def pg_lsclusters_vesr = sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[1] + ' sudo pg_lsclusters | grep 5432| awk \'{print \$1}\'' ).trim()
                        if (params.promote == true) {
                            sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[1] + ' sudo pg_ctlcluster ' + pg_lsclusters_vesr + pg_ctlcluster_arg)
                        }
                        sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ' + hosts[1] + ' sudo  ip addr add ' + hosts[2] + ' dev ens192 ')
                    }
                }
            }
        }
    }
    return stages
}
pipeline {
    agent { label 'worker-linux' }
    environment {
        KeyFile = credentials('944cbec1-6f0f-4261-979f-1e9df1062363')
        sshcmd = "ssh -o StrictHostKeyChecking=no  -l rnd-deploy"
        pg_ctlcluster_arg = " main promote"
    }
    parameters {
        choice(name: 'main_pg', choices: ['replica', 'master'], description: 'Host for VIP')
        booleanParam(name: 'force', defaultValue: false, description: '??!!')
        booleanParam(name: 'promote', defaultValue: true, description: 'Do promote \n\n\n\n')
{% for hostname_list in hostname_lists.results %}
{% set list = hostname_list.stdout.split('-')[1] %}
        booleanParam(name: "{{ list }}", defaultValue: true, description: 'IP for main_pg: \n for master : {{ dbs[loop.index0].ips[0]}} \n for replica : {{ dbs[loop.index0].ips[1]}}')
{% endfor %}
    }
    stages {
        stage('Parallel Stage') {
            parallel {
                stage('Main') {
                    steps {
                        script {
                            def MasterStages = createMasterStages(hostsMap)
                            parallel MasterStages
                        }
                    }
                }
                stage("Replication") {
                    steps {
                        script {
                            def SlaveStages = createSlaveStages(hostsMap)
                            parallel SlaveStages
                        }
                    }
                }
            }
        }
    }
}
