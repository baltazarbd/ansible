def jobinfo =   "Databases list: \n"+
{% for hostname_list in hostname_lists.results %}
"{{ hostname_list.stdout }}\n" + {% endfor %}"\n";

currentBuild.rawBuild.project.description = jobinfo;

def del_ip(ip1,ip2) {
    sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ${ip1} sudo  ip addr del ${ip2} dev ens192 ')
}

def add_ip(ip1,ip2) {
    sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ${ip1} sudo  ip addr add ${ip2} dev ens192 ')

}

def lsclusters_vesr(ip1) {
    pg_lsclusters_vesr = sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ${ip1} sudo pg_lsclusters | grep 5432| awk \'{print \$1}\'' ).trim()
    return(pg_lsclusters_vesr)
}
def clusters_promote(ip1) {
    sh (returnStdout: true, script: '${sshcmd} -i ${KeyFile} ${ip1} sudo pg_ctlcluster ' + pg_lsclusters_vesr + pg_ctlcluster_arg)
}

pipeline {
    agent { label 'worker-linux' }
    environment {
        KeyFile = credentials('944cbec1-6f0f-4261-979f-1e9df1062363')
        sshcmd = "ssh -o StrictHostKeyChecking=no  -l rnd-deploy"
        pg_ctlcluster_arg = " main promote"
    }
    parameters {
        choice(name: 'main_pg', choices: ['replica', 'master'], description: 'Host for VIP')
        booleanParam(name: 'force', defaultValue: false, description: '??!!')
        booleanParam(name: 'promote', defaultValue: true, description: 'Do promote \n\n\n\n')
{% for hostname_list in hostname_lists.results %}
{% set list = hostname_list.stdout.split('-')[1] %}
        booleanParam(name: "{{ list }}", defaultValue: true, description: 'IP for main_pg: \n for master : {{ dbs[loop.index0].ips[0]}} \n for replica : {{ dbs[loop.index0].ips[1]}}')
{% endfor %}
    }

    stages {
        stage('Parallel Stage') {
            parallel {
{% set list = hostname_lists %}
{% for db in dbs %}
{% set list1 = list.results[loop.index-1].stdout.split('-')[1] %}
                stage('{{ list1 }} add vip to master ') {
                    when {
                        allOf { 
                            expression { params.main_pg == 'master' }
                            expression { params.force == true }
                            expression { params.{{list1}} == true }
                        }
                    }
                    steps {
                        script {
                            try {
                                del_ip('{{ db.ips[1]}}', '{{ db.ips[2]}}') 
                                }
                            catch (Exception e) {
                            }
                            def pg_lsclusters_vesr = lsclusters_vesr('{{ db.ips[0]}}') 
                            if (params.promote == true) {
                                clusters_promote('{{ db.ips[0]}}')
                            }
                            add_ip('{{ db.ips[0]}}', '{{ db.ips[2]}}') 
                        }
                    }
                }
                stage('{{ list1 }} add vip to replica ') {    
                    when {
                        allOf { 
                            expression { params.main_pg == 'replica' }
                            expression { params.force == true }
                            expression { params.{{list1}} == true }

                        }
                    }
                    steps {
                        script {
                            try {
                                del_ip('{{ db.ips[0]}}', '{{ db.ips[2]}}') 
                                }
                            catch (Exception e) {
                            }
                            def pg_lsclusters_vesr = lsclusters_vesr('{{ db.ips[1]}}') 
                            if (params.promote == true) {
                                clusters_promote('{{ db.ips[1]}}')
                            }
                            add_ip('{{ db.ips[1]}}', '{{ db.ips[2]}}')
                        }
                    }
                }
{% endfor %}
            }
        }
    }
}
